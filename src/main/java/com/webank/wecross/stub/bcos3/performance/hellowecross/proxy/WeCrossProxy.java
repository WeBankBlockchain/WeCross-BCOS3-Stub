package com.webank.wecross.stub.bcos3.performance.hellowecross.proxy;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class WeCrossProxy extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "ffffffffffffffffffffffff1916908160001a9053508080614ff490616890565b915050614f75565b508095505050505050919050565b6000600a8260f81c60ff1610156150355760308260f81c61502b91906183e2565b60f81b905061504b565b60578260f81c61504591906183e2565b60f81b90505b919050565b60606000602060ff1667ffffffffffffffff81111561507257615071615960565b5b6040519080825280601f01601f1916602001820160405280156150a45781602001600182028036833780820191505090505b5090506000602060ff16905060005b81811015615127578481602081106150ce576150cd6167c0565b5b1a60f81b8382815181106150e5576150e46167c0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061511f90616890565b9150506150b3565b508192505050919050565b606061513d82613fe6565b836000015184604001516151548660200151613fe6565b615161876080015161519a565b61516e8860a001516153f9565b60405160200161518396959493929190618595565b604051602081830303815290604052905092915050565b6060600082905060008151905060008167ffffffffffffffff8111156151c3576151c2615960565b5b6040519080825280601f01601f1916602001820160405280156151f55781602001600182028036833780820191505090505b50905060007f280000000000000000000000000000000000000000000000000000000000000090506000805b8481101561531a57827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191686828151811061525f5761525e6167c0565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614615302578581815181106152a4576152a36167c0565b5b602001015160f81c60f81b8483806152bb90616890565b9450815181106152ce576152cd6167c0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350615307565b61531a565b808061531290616890565b915050615221565b5060008167ffffffffffffffff81111561533757615336615960565b5b6040519080825280601f01601f1916602001820160405280156153695781602001600182028036833780820191505090505b50905060005b828110156153ea5784818151811061538a576153896167c0565b5b602001015160f81c60f81b8282815181106153a8576153a76167c0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806153e290616890565b91505061536f565b50809650505050505050919050565b606060008251905060006002826154109190617b1e565b67ffffffffffffffff81111561542957615428615960565b5b6040519080825280601f01601f19166020018201604052801561545b5781602001600182028036833780820191505090505b50905060005b8281101561559757600085828151811061547e5761547d6167c0565b5b602001015160f81c60f81b9050600060108260f81c61549d9190617ed7565b60f81b905060008160f81c60106154b49190617f08565b8360f81c6154c29190617aea565b60f81b90506154d08261500a565b856002866154de9190617b1e565b815181106154ef576154ee6167c0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506155278161500a565b8560016002876155379190617b1e565b615541919061676a565b81518110615552576155516167c0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061558f90616890565b915050615461565b508092505050919050565b8280546155ae9061655d565b90600052602060002090601f0160209004810192826155d05760008555615617565b82601f106155e957805160ff1916838001178555615617565b82800160010185558215615617579182015b828111156156165782518255916020019190600101906155fb565b5b5090506156249190615846565b5090565b828054828255906000526020600020908101928215615677579160200282015b828111156156765782518290805190602001906156669291906155a2565b5091602001919060010190615648565b5b5090506156849190615863565b5090565b828054828255906000526020600020908101928215615701579160200282015b828111156157005782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906156a8565b5b50905061570e9190615846565b5090565b82805482825590600052602060002090810192821561574e579160200282015b8281111561574d578251825591602001919060010190615732565b5b50905061575b9190615846565b5090565b82805461576b9061655d565b90600052602060002090601f01602090048101928261578d57600085556157d4565b82601f106157a657805160ff19168380011785556157d4565b828001600101855582156157d4579182015b828111156157d35782518255916020019190600101906157b8565b5b5090506157e19190615846565b5090565b50805460008255906000526020600020908101906158039190615863565b50565b5080546158129061655d565b6000825580601f106158245750615843565b601f0160209004906000526020600020908101906158429190615846565b5b50565b5b8082111561585f576000816000905550600101615847565b5090565b5b80821115615883576000818161587a9190615806565b50600101615864565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156158c15780820151818401526020810190506158a6565b838111156158d0576000848401525b50505050565b6000601f19601f8301169050919050565b60006158f282615887565b6158fc8185615892565b935061590c8185602086016158a3565b615915816158d6565b840191505092915050565b6000602082019050818103600083015261593a81846158e7565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b615998826158d6565b810181811067ffffffffffffffff821117156159b7576159b6615960565b5b80604052505050565b60006159ca615942565b90506159d6828261598f565b919050565b600067ffffffffffffffff8211156159f6576159f5615960565b5b6159ff826158d6565b9050602081019050919050565b82818337600083830152505050565b6000615a2e615a29846159db565b6159c0565b905082815260208101848484011115615a4a57615a4961595b565b5b615a55848285615a0c565b509392505050565b600082601f830112615a7257615a71615956565b5b8135615a82848260208601615a1b565b91505092915050565b600067ffffffffffffffff821115615aa657615aa5615960565b5b615aaf826158d6565b9050602081019050919050565b6000615acf615aca84615a8b565b6159c0565b905082815260208101848484011115615aeb57615aea61595b565b5b615af6848285615a0c565b509392505050565b600082601f830112615b1357615b12615956565b5b8135615b23848260208601615abc565b91505092915050565b60008060408385031215615b4357615b4261594c565b5b600083013567ffffffffffffffff811115615b6157615b60615951565b5b615b6d85828601615a5d565b925050602083013567ffffffffffffffff811115615b8e57615b8d615951565b5b615b9a85828601615afe565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000615bcb82615ba4565b615bd58185615baf565b9350615be58185602086016158a3565b615bee816158d6565b840191505092915050565b60006020820190508181036000830152615c138184615bc0565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000615c6382615887565b615c6d8185615c47565b9350615c7d8185602086016158a3565b615c86816158d6565b840191505092915050565b6000615c9d8383615c58565b905092915050565b6000602082019050919050565b6000615cbd82615c1b565b615cc78185615c26565b935083602082028501615cd985615c37565b8060005b85811015615d155784840389528151615cf68582615c91565b9450615d0183615ca5565b925060208a01995050600181019050615cdd565b50829750879550505050505092915050565b60006020820190508181036000830152615d418184615cb2565b905092915050565b600067ffffffffffffffff821115615d6457615d63615960565b5b602082029050602081019050919050565b600080fd5b6000615d8d615d8884615d49565b6159c0565b90508083825260208201905060208402830185811115615db057615daf615d75565b5b835b81811015615df757803567ffffffffffffffff811115615dd557615dd4615956565b5b808601615de28982615a5d565b85526020850194505050602081019050615db2565b5050509392505050565b600082601f830112615e1657615e15615956565b5b8135615e26848260208601615d7a565b91505092915050565b600080600060608486031215615e4857615e4761594c565b5b600084013567ffffffffffffffff811115615e6657615e65615951565b5b615e7286828701615a5d565b935050602084013567ffffffffffffffff811115615e9357615e92615951565b5b615e9f86828701615e01565b925050604084013567ffffffffffffffff811115615ec057615ebf615951565b5b615ecc86828701615e01565b9150509250925092565b600060208284031215615eec57615eeb61594c565b5b600082013567ffffffffffffffff811115615f0a57615f09615951565b5b615f1684828501615a5d565b91505092915050565b60006060820190508181036000830152615f3981866158e7565b90508181036020830152615f4d81856158e7565b90508181036040830152615f6181846158e7565b9050949350505050565b6000819050919050565b615f7e81615f6b565b8114615f8957600080fd5b50565b600081359050615f9b81615f75565b92915050565b60008060008060008060c08789031215615fbe57615fbd61594c565b5b600087013567ffffffffffffffff811115615fdc57",
        "",
        "",
        "0082015250565b6000617fe76001836164b1565b9150617ff282617fb1565b600182019050919050565b60006180098286616691565b91506180158285616691565b915061802082617fda565b915061802c8284616691565b9150819050949350505050565b7f5b22000000000000000000000000000000000000000000000000000000000000600082015250565b600061806f6002836164b1565b915061807a82618039565b600282019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b60006180bb6001836164b1565b91506180c682618085565b600182019050919050565b60006180dc82618062565b91506180e882846165a4565b91506180f3826180ae565b915081905092915050565b7f2c22000000000000000000000000000000000000000000000000000000000000600082015250565b60006181346002836164b1565b915061813f826180fe565b600282019050919050565b60006181568285616691565b915061816182618127565b915061816d82846165a4565b9150618178826180ae565b91508190509392505050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006181ba6001836164b1565b91506181c582618184565b600182019050919050565b60006181dc8284616691565b91506181e7826181ad565b915081905092915050565b60006181fd82615f6b565b915061820883615f6b565b925082618218576182176168d9565b5b828206905092915050565b7f5b00000000000000000000000000000000000000000000000000000000000000600082015250565b60006182596001836164b1565b915061826482618223565b600182019050919050565b600061827a8261824c565b91506182868284616691565b915081905092915050565b600061829d8285616691565b91506182a882616fe2565b91506182b48284616691565b91508190509392505050565b60006182cc8285616691565b91506182d88284616691565b91508190509392505050565b7f64656c657465206e6f6e6578697374656e74207861207472616e73616374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000618340602183615892565b915061834b826182e4565b604082019050919050565b6000602082019050818103600083015261836f81618333565b9050919050565b7f64656c65746520756e6d617463686564207861207472616e73616374696f6e00600082015250565b60006183ac601f83615892565b91506183b782618376565b602082019050919050565b600060208201905081810360008301526183db8161839f565b9050919050565b60006183ed82617add565b91506183f883617add565b92508260ff0382111561840e5761840d61673b565b5b828201905092915050565b7f7b2278615472616e73616374696f6e536571223a000000000000000000000000600082015250565b600061844f6014836164b1565b915061845a82618419565b601482019050919050565b7f2270617468223a22000000000000000000000000000000000000000000000000600082015250565b600061849b6008836164b1565b91506184a682618465565b600882019050919050565b7f226d6574686f64223a2200000000000000000000000000000000000000000000600082015250565b60006184e7600a836164b1565b91506184f2826184b1565b600a82019050919050565b7f2261726773223a22000000000000000000000000000000000000000000000000600082015250565b60006185336008836164b1565b915061853e826184fd565b600882019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061857f6002836164b1565b915061858a82618549565b600282019050919050565b60006185a082618442565b91506185ac8289616691565b91506185b782616fe2565b91506185c282616efe565b91506185ce8288616691565b91506185d982616eb2565b91506185e48261848e565b91506185f08287616691565b91506185fb82616eb2565b915061860682617433565b91506186128286616691565b915061861d82616fe2565b9150618628826184da565b91506186348285616691565b915061863f82616eb2565b915061864a82618526565b91506186568284616691565b915061866182618572565b915081905097965050505050505056fea26469706673582212207851c27d4a2c718d981ba8b871932e3fde31d4439a01abf4fc5e24043cc274a164736f6c634300080b0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "810290505b9392505050565b6000617fea82615c93565b9150617ff583615c93565b92506180227fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484617f0c565b905092915050565b6000618035826166c9565b9150618040836166c9565b9250826180505761804f616ba2565b5b828204905092915050565b6000618066826166c9565b9150618071836166c9565b92508160ff048311821515161561808b5761808a6166d6565b5b828202905092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b60006180cc6002836164b1565b91506180d782618096565b600282019050919050565b60006180ed826180bf565b91506180f982846164bc565b915081905092915050565b7f5b22000000000000000000000000000000000000000000000000000000000000600082015250565b600061813a6002836164b1565b915061814582618104565b600282019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b60006181866001836164b1565b915061819182618150565b600182019050919050565b60006181a78261812d565b91506181b382846165ec565b91506181be82618179565b915081905092915050565b7f2c22000000000000000000000000000000000000000000000000000000000000600082015250565b60006181ff6002836164b1565b915061820a826181c9565b600282019050919050565b600061822182856164bc565b915061822c826181f2565b915061823882846165ec565b915061824382618179565b91508190509392505050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006182856001836164b1565b91506182908261824f565b600182019050919050565b60006182a782846164bc565b91506182b282618278565b915081905092915050565b7f5b00000000000000000000000000000000000000000000000000000000000000600082015250565b60006182f36001836164b1565b91506182fe826182bd565b600182019050919050565b6000618314826182e6565b915061832082846164bc565b915081905092915050565b600061833782856164bc565b91506183428261722f565b915061834e82846164bc565b91508190509392505050565b7f2f00000000000000000000000000000000000000000000000000000000000000600082015250565b60006183906001836164b1565b915061839b8261835a565b600182019050919050565b60006183b282866164bc565b91506183be82856164bc565b91506183c982618383565b91506183d582846164bc565b9150819050949350505050565b60006183ed826166c9565b91506183f8836166c9565b92508260ff0382111561840e5761840d6166d6565b5b828201905092915050565b7f7b2278615472616e73616374696f6e536571223a000000000000000000000000600082015250565b600061844f6014836164b1565b915061845a82618419565b601482019050919050565b7f2270617468223a22000000000000000000000000000000000000000000000000600082015250565b600061849b6008836164b1565b91506184a682618465565b600882019050919050565b7f226d6574686f64223a2200000000000000000000000000000000000000000000600082015250565b60006184e7600a836164b1565b91506184f2826184b1565b600a82019050919050565b7f2261726773223a22000000000000000000000000000000000000000000000000600082015250565b60006185336008836164b1565b915061853e826184fd565b600882019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061857f6002836164b1565b915061858a82618549565b600282019050919050565b60006185a082618442565b91506185ac82896164bc565b91506185b78261722f565b91506185c28261714b565b91506185ce82886164bc565b91506185d9826170ff565b91506185e48261848e565b91506185f082876164bc565b91506185fb826170ff565b915061860682617519565b915061861282866164bc565b915061861d8261722f565b9150618628826184da565b915061863482856164bc565b915061863f826170ff565b915061864a82618526565b915061865682846164bc565b915061866182618572565b915081905097965050505050505056fea2646970667358221220cc6706b6e367b7f88cfaee43d7ca5c0482ab6148bb83266f7df5b85f4ef9138a64736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"}],\"name\":\"addPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"commitXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_XATransactionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"constantCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deletePathList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bin\",\"type\":\"bytes\"}],\"name\":\"deployContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_bin\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"deployContractWithRegisterBFS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestXATransactionID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaths\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"getXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getXATransactionNumber\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"}],\"name\":\"getXATransactionState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_addr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"name\":\"linkBFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_index\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"listXATransactions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"readlink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_address\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_abi\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"rollbackAndDeleteXATransactionTask\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"}],\"name\":\"rollbackXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_argsWithMethodId\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_XATransactionID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_XATransactionSeq\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_args\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_xaTransactionID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_selfPaths\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_otherPaths\",\"type\":\"string[]\"}],\"name\":\"startXATransaction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"stringToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDPATH = "addPath";

    public static final String FUNC_COMMITXATRANSACTION = "commitXATransaction";

    public static final String FUNC_CONSTANTCALL = "constantCall";

    public static final String FUNC_DELETEPATHLIST = "deletePathList";

    public static final String FUNC_DEPLOYCONTRACT = "deployContract";

    public static final String FUNC_DEPLOYCONTRACTWITHREGISTERBFS = "deployContractWithRegisterBFS";

    public static final String FUNC_GETLATESTXATRANSACTION = "getLatestXATransaction";

    public static final String FUNC_GETLATESTXATRANSACTIONID = "getLatestXATransactionID";

    public static final String FUNC_GETPATHS = "getPaths";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_GETXATRANSACTION = "getXATransaction";

    public static final String FUNC_GETXATRANSACTIONNUMBER = "getXATransactionNumber";

    public static final String FUNC_GETXATRANSACTIONSTATE = "getXATransactionState";

    public static final String FUNC_LINKBFS = "linkBFS";

    public static final String FUNC_LISTXATRANSACTIONS = "listXATransactions";

    public static final String FUNC_READLINK = "readlink";

    public static final String FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK =
            "rollbackAndDeleteXATransactionTask";

    public static final String FUNC_ROLLBACKXATRANSACTION = "rollbackXATransaction";

    public static final String FUNC_SENDTRANSACTION = "sendTransaction";

    public static final String FUNC_STARTXATRANSACTION = "startXATransaction";

    public static final String FUNC_STRINGTOUINT256 = "stringToUint256";

    protected WeCrossProxy(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt addPath(String _path) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String addPath(String _path, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPath(String _path) {
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddPathInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDPATH,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt commitXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String commitXATransaction(String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCommitXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCommitXATransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getCommitXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_COMMITXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt constantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String constantCall(
            String _name, byte[] _argsWithMethodId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConstantCall(String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, byte[]> getConstantCallStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, byte[]>(
                (String) results.get(0).getValue(), (byte[]) results.get(1).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringBytesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt constantCall(
            String _XATransactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String constantCall(
            String _XATransactionID,
            String _path,
            String _func,
            byte[] _args,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConstantCall(
            String _XATransactionID, String _path, String _func, byte[] _args) {
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, byte[]> getConstantCallStringStringStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public Tuple1<byte[]> getConstantCallStringStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CONSTANTCALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt deletePathList() {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deletePathList(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeletePathList() {
        final Function function =
                new Function(
                        FUNC_DELETEPATHLIST,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public TransactionReceipt deployContract(byte[] _bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deployContract(byte[] _bin, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeployContract(byte[] _bin) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getDeployContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public Tuple1<String> getDeployContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt deployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String deployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeployContractWithRegisterBFS(
            String _path, byte[] _bin, String _abi) {
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_bin),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], String> getDeployContractWithRegisterBFSInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], String>(
                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<String> getDeployContractWithRegisterBFSOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_DEPLOYCONTRACTWITHREGISTERBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public String getLatestXATransaction() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETLATESTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getLatestXATransactionID() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETLATESTXATRANSACTIONID,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getPaths() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETPATHS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt getVersion() {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getVersion(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetVersion() {
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetVersionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_GETVERSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public String getXATransaction(String _xaTransactionID) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getXATransactionNumber() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTIONNUMBER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getXATransactionState(String _path) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETXATRANSACTIONSTATE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt linkBFS(String _path, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String linkBFS(String _path, String _addr, String _abi, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLinkBFS(String _path, String _addr, String _abi) {
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_addr),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_abi)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getLinkBFSInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_LINKBFS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public String listXATransactions(String _index, BigInteger _size) throws ContractException {
        final Function function =
                new Function(
                        FUNC_LISTXATRANSACTIONS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_index),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_size)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple3<String, String, String> readlink(String name) throws ContractException {
        final Function function =
                new Function(
                        FUNC_READLINK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public TransactionReceipt rollbackAndDeleteXATransactionTask(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String rollbackAndDeleteXATransactionTask(
            String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRollbackAndDeleteXATransactionTask(
            String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRollbackAndDeleteXATransactionTaskInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getRollbackAndDeleteXATransactionTaskOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKANDDELETEXATRANSACTIONTASK,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt rollbackXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String rollbackXATransaction(String _xaTransactionID, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRollbackXATransaction(String _xaTransactionID) {
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRollbackXATransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<String> getRollbackXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_ROLLBACKXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt sendTransaction(String _uid, String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String sendTransaction(
            String _uid, String _name, byte[] _argsWithMethodId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTransaction(
            String _uid, String _name, byte[] _argsWithMethodId) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(
                                        _argsWithMethodId)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, byte[]> getSendTransactionStringStringBytesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt sendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String sendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSendTransaction(
            String _uid,
            String _XATransactionID,
            BigInteger _XATransactionSeq,
            String _path,
            String _func,
            byte[] _args) {
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_uid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _XATransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(
                                        _XATransactionSeq),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_path),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_func),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_args)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, BigInteger, String, String, byte[]>
            getSendTransactionStringStringUint256StringStringBytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, BigInteger, String, String, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (byte[]) results.get(5).getValue());
    }

    public Tuple1<byte[]> getSendTransactionStringStringUint256StringStringBytesOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SENDTRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt startXATransaction(
            String _xaTransactionID, List<String> _selfPaths, List<String> _otherPaths) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String startXATransaction(
            String _xaTransactionID,
            List<String> _selfPaths,
            List<String> _otherPaths,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStartXATransaction(
            String _xaTransactionID, List<String> _selfPaths, List<String> _otherPaths) {
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(
                                        _xaTransactionID),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _selfPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                _otherPaths,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<String>, List<String>> getStartXATransactionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public Tuple1<String> getStartXATransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STARTXATRANSACTION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt stringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String stringToUint256(String _str, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStringToUint256(String _str) {
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_str)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getStringToUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Tuple1<BigInteger> getStringToUint256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STRINGTOUINT256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public static WeCrossProxy load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new WeCrossProxy(contractAddress, client, credential);
    }

    public static WeCrossProxy deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                WeCrossProxy.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }
}
